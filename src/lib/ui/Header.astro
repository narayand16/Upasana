---
// Header component - contains the site logo and dark mode toggle
---

<header class="bg-white dark:bg-gray-800 shadow-sm">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">
    <a href="/" class="font-bold text-xl text-primary-600 dark:text-primary-400">Upasana</a>
    
    <button 
      id="theme-toggle"
      type="button"
      aria-label="Toggle theme"
      class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg p-2.5"
    >
      <svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
        <title>Dark Mode</title>
        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
      </svg>
      <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
        <title>Light Mode</title>
        <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>
      </svg>
    </button>
  </div>
</header>

<script>
  // Type definitions
  type ThemeMode = 'light' | 'dark' | 'system';
  
  // Initialize dark mode on component mount
  function initTheme(): void {
    // Check for saved theme preference or use the system preference
    const darkMode = localStorage.getItem('darkMode');
    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    // If user has already visited and has a preference
    if (darkMode === 'true') {
      document.documentElement.classList.add('dark');
    } else if (darkMode === 'false') {
      document.documentElement.classList.remove('dark');
    } else if (darkModeMediaQuery.matches) {
      document.documentElement.classList.add('dark');
    }
    
    // Update toggle icons
    updateThemeToggleIcons();
  }
  
  // Update the toggle button icons based on current theme
  function updateThemeToggleIcons(): void {
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    
    if (document.documentElement.classList.contains('dark')) {
      darkIcon?.classList.add('hidden');
      lightIcon?.classList.remove('hidden');
    } else {
      darkIcon?.classList.remove('hidden');
      lightIcon?.classList.add('hidden');
    }
  }
  
  // Toggle dark mode
  function toggleDarkMode(): void {
    const isDark = document.documentElement.classList.toggle('dark');
    localStorage.setItem('darkMode', isDark.toString());
    updateThemeToggleIcons();
  }
  
  // Set up event listener for toggle button
  document.addEventListener('DOMContentLoaded', () => {
    initTheme();
    
    const themeToggle = document.getElementById('theme-toggle');
    themeToggle?.addEventListener('click', toggleDarkMode);
  });
</script>
